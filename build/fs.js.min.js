var global=this,fs;global.requestFileSystem=global.requestFileSystem||global.webkitRequestFileSystem;global.BlobBuilder=global.BlobBuilder||global.WebKitBlobBuilder;global.resolveLocalFileSystemURL=global.resolveLocalFileSystemURL||global.webkitResolveLocalFileSystemURL;global.URL=global.URL||global.webkitURL;
fs=Object.create({},{version:{value:"0.9"},log:{value:!1,writable:!0},maxSize:{value:10695475200,writable:!0},FILE_EXPECTED:{value:50},BROWSER_NOT_SUPPORTED:{value:51},getNativeFS:{value:function(a,b){if(global.requestFileSystem){var c=global.PERSISTENT,b=b||{};if(b.tmp)c=global.TEMPORARY;global.requestFileSystem(c,this.maxSize,function(b){a(void 0,b)},function(b){a(b)})}else a(fs.BROWSER_NOT_SUPPORTED)}},createBlob:{value:function(a,b){var c=new global.BlobBuilder;c.append(a);return c.getBlob(b)}},
base64StringToBlob:{value:function(a,b){for(var c=global.atob(a),d=c.length,e=new global.Int8Array(d),f=0;f<d;f++)e[f]=c.charCodeAt(f);return this.createBlob(e.buffer,b)}}});Object.defineProperty(global.File.prototype,"shortName",{value:function(){return this.name.substring(0,this.name.lastIndexOf("."))}});Object.defineProperty(global.File.prototype,"extension",{value:function(){return this.name.substring(this.name.lastIndexOf("."))}});
Object.defineProperty(global.File.prototype,"sizeInKB",{value:function(){return(this.size/1014).toFixed(1)}});Object.defineProperty(global.File.prototype,"sizeInMB",{value:function(){return(this.size/1038336).toFixed(1)}});Object.defineProperty(global.File.prototype,"sizeInGB",{value:function(){return(this.size/1063256064).toFixed(1)}});Object.defineProperty(global.FileError.prototype,"message",{value:function(){return this.code}});
fs.io=Object.create({},{getFile:{value:function(a,b,c){a.getFile(b,{create:!1},function(b){c(void 0,b)},function(b){c(b)})}},getFileFromRoot:{value:function(a,b,c){fs.getNativeFS(function(c,e){c?b(c):fs.util.getFile(e.root,a,b)},c)}},readDirectory:{value:function(a,b){fs.util.getDirectory(a,function(a,d){a?b(a):fs.util.readEntriesFromDirectory(d,b)},{})}},readRootDirectory:{value:function(a){fs.getNativeFS(function(b,c){b?a(b):fs.util.readEntriesFromDirectory(c.root,a)},{})}},getDirectory:{value:function(a,
b,c){c(void 0,a.getDirectory(b,{create:!0}))}},getDirectoryFromRoot:{value:function(a,b,c){fs.getNativeFS(function(c,e){c?b(c):fs.util.getDirectory(e.root,a,b)},c)}}});
fs.util=Object.create({},{getReaderUsingFileName:{value:function(a,b,c,d){fs.util.getFileFromRoot(a,function(a,d){d.file(function(a){fs.util.getReader(a,b,c)},function(a){b(a)})},d)}},getReader:{value:function(a,b,c){var d=new global.FileReader;d.onloadend=function(){b(void 0,this.result,a)};d[c](a)}},readEntriesFromDirectory:{value:function(a,b){a.createReader().readEntries(function(a){b(void 0,a)},function(a){b(a)})}},readAsArrayBuffer:{value:function(a,b,c){this.getReaderUsingFileName(a,b,"readAsArrayBuffer",
c)}},readFileAsArrayBuffer:{value:function(a,b){this.getReader(a,b,"readAsArrayBuffer")}},readAsBinaryString:{value:function(a,b,c){this.getReaderUsingFileName(a,b,"readAsBinaryString",c)}},readFileAsBinaryString:{value:function(a,b){this.getReader(a,b,"readAsBinaryString")}},readAsDataUrl:{value:function(a,b,c){this.getReaderUsingFileName(a,b,"readAsDataURL",c)}},readAsText:{value:function(a,b,c){this.getReaderUsingFileName(a,b,"readAsText",c)}},remove:{value:function(a,b){fs.io.getFileFromRoot(a,
function(a,d){d.remove(function(){b(void 0)},function(a){b(a)})})}},writeBase64StrToFile:{value:function(a,b,c,d,e){b=fs.base64StringToBlob(b,c);this.writeBlobToFile(a,b,d,e)}},writeBlobToFile:{value:function(a,b,c,d){fs.io.getFileFromRoot(a,function(a,d){a?c(a):d.createWriter(function(a){a.onwriteend=function(){console.log("writing to file finished.");c(void 0)};a.onerror=function(){console.log("Error writing to file:"+this.error);c(this.error)};a.write(b)},function(a){c(a)})},d)}},writeTextToFile:{value:function(a,
b,c,d){b=fs.createBlob(b,"text/plain");fs.util.writeBlobToFile(a,b,c,d)}},writeArrayBufferToFile:{value:function(a,b,c,d,e){b=fs.createBlob(c,b);fs.util.writeBlobToFile(a,b,d,e)}},writeFileToFile:{value:function(a,b,c){fs.io.getFileFromRoot(c.filename||a.name,function(c,e){c?b(c):e.createWriter(function(c){c.onwriteend=function(){console.log("writing to file finished.");b(void 0)};c.onerror=function(){console.log("Error writing to file:"+this.error);b(this.error)};c.write(a)},function(a){b(a)})},
c)}},createFileURL:{value:function(a,b){fs.io.getFileFromRoot(a,function(a,d){a?b(a):d.file(function(a){a=global.URL.createObjectURL(a);b(void 0,a)})})}},destroyFileURL:{value:function(a){global.URL.revokeObjectURL(a)}}});
fs.read=Object.create({},{asDataUrl:{value:function(a,b){fs.util.readAsDataUrl(a,b,{})}},tmpFileAsDataUrl:{value:function(a,b){fs.util.readAsDataUrl(a,b,{tmp:!0})}},asText:{value:function(a,b){fs.util.readAsText(a,b,{})}},tmpFileAsText:{value:function(a,b){fs.util.readAsText(a,b,{tmp:!0})}},asBinaryString:{value:function(a,b){fs.util.readAsBinaryString(a,b,{})}},tmpFileAsBinaryString:{value:function(a,b){fs.util.readAsBinaryString(a,b,{tmp:!0})}},asArrayBuffer:{value:function(a,b){fs.util.readAsArrayBuffer(a,
b,{})}},tmpFileAsArrayBuffer:{value:function(a,b){fs.util.readAsArrayBuffer(a,b,{tmp:!0})}},fileAsText:{value:function(a,b){fs.util.getReader(a,b,"readAsText")}},fileAsDataUrl:{value:function(a,b){fs.util.getReader(a,b,"readAsDataURL")}},fileAsArrayBuffer:{value:function(a,b){fs.util.readFileAsArrayBuffer(a,b)}},fileAsBinaryString:{value:function(a,b){fs.util.readFileAsBinaryString(a,b)}}});
fs.write=Object.create({},{file:{value:function(a,b,c){fs.util.writeFileToFile(a,b,{filename:c})}},fileToTmpFile:{value:function(a,b,c){fs.util.writeFileToFile(a,b,{tmp:!0,filename:c})}},blob:{value:function(a,b,c){fs.util.writeBlobToFile(a,b,c,{})}},blobToTmpFile:{value:function(a,b,c){fs.util.writeBlobToFile(a,b,c,{tmp:!0})}},text:{value:function(a,b,c){fs.util.writeTextToFile(a,b,c,{})}},textToTmpFile:{value:function(a,b,c){fs.util.writeTextToFile(a,b,c,{tmp:!0})}},base64Str:{value:function(a,
b,c,d){fs.util.writeBase64StrToFile(a,b,c,d,{})}},base64StrToTmpFile:{value:function(a,b,c,d){fs.util.writeBase64StrToFile(a,b,c,d,{tmp:!0})}}});
